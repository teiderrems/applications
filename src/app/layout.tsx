"use client";
// // import type { Metadata } from "next";
// import { Inter } from "next/font/google";
// import "./globals.css";
// import Footer from "./components/Footer";
// import { useEffect, useState } from "react";
// import boutonX from '../../public/cross.svg';
// import { usePathname, useRouter } from "next/navigation";
// import  profileImg  from '../../public/defaul.jpeg';
// import logo from '../../public/icon.png';
// import Link from "next/link";
// import Image from "next/image";
// import burgerImg from '../../public/menu.svg';
// import  Head  from "next/head";
// import { EditOutlined, HomeOutlined, LogoutOutlined, ProfileOutlined, UnorderedListOutlined } from "@ant-design/icons";
// import { Avatar, Button, Dropdown, MenuProps, Space } from "antd";
// import Axios from "@/hooks/axios.config";

// const inter = Inter({ subsets: ["latin"] });

// // export const metadata: Metadata = {
// //   title: "Create Next App",
// //   description: "Generated by create next app",
// // };

// export default function RootLayout({
//   children,
// }: Readonly<{
//   children: React.ReactNode;
// }>) {

//   const [togel,setTogel]=useState(false)
//   const [token,setToken]=useState<any>(undefined);
//   const [image,setImage]=useState(burgerImg);
//   const [user,setUser]=useState<any>(undefined);
//   const [profile,setProfile]=useState<any>(undefined);
//   const router=useRouter();

//     const LogOut=()=>{
//       localStorage.removeItem("token");
//       localStorage.removeItem("refresh");
//       localStorage.removeItem("userId");
//       setToken('');
//       setUser(undefined);
//       router.push(`/login?ReturnUrl=${pathname}`);
//     }

//     const items: MenuProps['items'] = [
//       {
//         key: '1',
//         label: (
//           <button onClick={LogOut} className="">LogOut</button>
//         ),
//         icon:<LogoutOutlined />
//       },
//       {
//         key: '2',
//         label: (
//           <Link href="/about" className="">About</Link>
//         ),
//         icon: <ProfileOutlined />,
//         disabled: false,
//       }
//     ];
//  function toggleNav(){
//    setImage((state: any)=>state=(!togel)?boutonX:burgerImg);
//    setTogel(state=>state=!togel);
//  }

//   const pathname=usePathname();
//   useEffect(()=>{

//     setToken((state:any)=>state=(!!localStorage.getItem("token"))&&localStorage.getItem("token"));
//     if (window.localStorage&&(localStorage.getItem("token"))) {
//       setUser((state: any)=>state=JSON.parse(atob(localStorage.getItem("token")!.split('.')[1])));
//     }
//     const getProfile=async()=>{
//       try {
//         const res=await Axios.get(`profile/${user.profileId}`);
//         const imgb64=Buffer.from((res.data.image)).toString('base64');
//         setProfile((state: string)=>state=`data:${res.data.minetype};base64,${imgb64}`);
//       } catch (error) {
//         console.log(error);
//       }
//     }
//     if (user && user.profileId) {
//       getProfile();
//     }
//   },[image, togel, token, router, profile]);

//   return (
//       <html lang="en">
//         <Head><title>Home Page</title></Head>
//         <body className="flex min-h-screen " onClick={()=>{
//           if (togel) {
//             setTogel(false);
//             setImage(burgerImg);
//           }
//         }}>
//           <div id="toggled-menu"
//               className={`w-4/5 absolute top-0 min-h-screen left-0 -translate-x-full bg-gradient-to-br from-gray-50 via-slate-50 to-blue-50  ${togel?'translate-x-0 z-20 opacity-100 w-1/5':''} text-gray-800 border-b border-gray-200 flex flex-col items-center md:static min-h-full md:w-1/6 md:transform-none md:border-none`}>
//             <div  className="flex w-full justify-start">
//               <Link href={'/'} className="hover:text-white flex-1">

//                 <Image src={logo} alt="Application Record" className="p-2 hover:cursor-pointer w-1/2 rounded-2xl h-14 " />
//               </Link>

//             </div>
//             <div className="flex-1 flex w-full flex-col">

//             {
//               user?(
//               <nav className="flex flex-col flex-1 py-3 space-y-6 text-justify w-full">
//                   <Link href="/" className={`px-2 capitalize text-lg ${pathname=="/"?'active':''}`}><HomeOutlined /> Home</Link>
//                   <Link href="/application" className={`px-2 text-lg ${pathname=="/application"&&'active'}`}><UnorderedListOutlined /> Application</Link>
//                   <Link href="/user/profile" className={`px-2 text-lg ${pathname=="/user/profile"&&'active'}`}><EditOutlined /> Profile</Link>
//                   {
//                     user?.role=='admin'&&<Link href="/user" className={`px-2 capitalize text-lg ${pathname=="/user"?'active':''}`}><UnorderedListOutlined /> Users</Link>
//                   }
//               </nav>
//               ):(
//                 <nav className="flex flex-col flex-1 py-3 space-y-6 text-justify w-full">
//                     <Link href="/register" className={`px-2 text-lg ${pathname=="/register"&&'active'}`}>Regiter</Link>
//                     <Link href="/login" className={`px-2 text-lg ${pathname=="/login"?'active':''}`}>Login</Link>
//                 </nav>
//               )
//             }
//             </div>
//             <Footer/>
//             </div>
//           <div className="flex-1 flex flex-col h-screen">
//             <div className="flex flex-row h-14 md:h-12 bg-gradient-to-bl from-gray-50 via-slate-50 to-blue-50  justify-between  w-full">
//               <button
//                 aria-label="toggle button"
//                 aria-expanded="false"
//                 id="menu-btn"
//                 className="cursor-pointer w-10 h-full md:hidden"
//                 onClick={toggleNav}
//                 >
//                   <Image src={image} alt="button"/>
//               </button>
//                 <span className=" capitalize pl-1 invisible md:visible md:w-1/3"></span>
//                 {
//                   token?<button className="px-1 h-full">
//                     <Dropdown menu={{ items }}>
//                       <a onClick={(e) => e.preventDefault()}>
//                         <Space>
//                         <Avatar icon={<Image width={75} priority height={75} src={(profile)?profile:profileImg} alt="profile"/>} />
//                         </Space>
//                       </a>
//                     </Dropdown>

//                   </button>:<Button  className="m-2"><Link href="/about">About</Link></Button>
//                 }
//             </div>
//             <div className="flex-1 text-md">
//               {children}
//             </div>
//           </div>
//         </body>
//       </html>
//   );
// }
import "./globals.css";
import React, { useEffect, useState } from "react";
import {
  HomeOutlined,
  LoginOutlined,
  LogoutOutlined,
  MenuFoldOutlined,
  MenuUnfoldOutlined,
  ReadOutlined,
  SolutionOutlined,
  UnorderedListOutlined,
  UserOutlined
} from "@ant-design/icons";
import { Button, Layout, Menu, theme } from "antd";
import { ItemType, MenuItemType } from "antd/es/menu/hooks/useItems";
import { usePathname, useRouter } from "next/navigation";

const { Header, Sider, Content } = Layout;

const AppLayout = ({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) => {
  const [collapsed, setCollapsed] = useState(false);
  const {
    token: { colorBgContainer, borderRadiusLG },
  } = theme.useToken();

  const logItems:ItemType<MenuItemType>[]=[
    {
      key: "1",
      icon: <HomeOutlined />,
      label: "Home",
      onClick: () => {
        router.push("/");
        setSelected("1");
      },
      disabled:false
    },
    {
      key: "4",
      icon: <UnorderedListOutlined />,
      label: "Applications",
      onClick: () => {
        router.push("/application");
        setSelected("4");
      },
    },
    {
      key: "5",
      icon: <UnorderedListOutlined />,
      label: "Users",
      onClick: () => {
        router.push("/user");
        setSelected("5");
      },
      disabled:localStorage.getItem("token")&&JSON.parse(atob((localStorage.getItem("token")?.split('.')[1] as string))).role!=='admin'?true:false
    },
    {
      key: "6",
      icon: <UserOutlined />,
      label: "Profile",
      onClick: () => {
        router.push("/user/profile");
        setSelected("6");
      },
    },
    {
      key: "7",
      icon: <LogoutOutlined />,
      label: "LogOut",
      onClick: () => {
        setItems([
          {
            key: "1",
            icon: <HomeOutlined />,
            label: "Home",
            onClick: () => {
              router.push("/");
              setSelected("1");
            },
            disabled:false
          },
          {
            key: "2",
            icon: <LoginOutlined />,
            label: "Login",
            onClick: () => {
              router.replace("/login");
              setSelected("2");
            },
          },
          {
            key: "3",
            icon: <SolutionOutlined />,
            label: "Register",
            onClick: () => {
              router.replace("/register")
              setSelected("3");
            },
          },
          {
            key: "7",
            icon: <ReadOutlined />,
            label: "About",
            onClick: () => {
              router.push("/about");
              setSelected("7");
            },
          },
        ]);
        localStorage.clear();
        setSelected("7");
      },
    },
    {
      key: "8",
      icon: <ReadOutlined />,
      label: "About",
      onClick: () => {
        router.push("/about");
        setSelected("8");
      },
    },
  ];

  const router = useRouter();
  const [selected,setSelected]=useState("1");
  const [items, setItems] = useState<ItemType<MenuItemType>[]>([
    {
      key: "1",
      icon: <HomeOutlined />,
      label: "Home",
      onClick: () => {
        router.push("/");
        setSelected("1");
      },
      disabled:false
    },
    {
      key: "2",
      icon: <LoginOutlined />,
      label: "Login",
      onClick: () => {
        router.replace("/login");
        setSelected("2");
      },
    },
    {
      key: "3",
      icon: <SolutionOutlined />,
      label: "Register",
      onClick: () => {
        router.replace("/register")
        setSelected("3");
      },
    },
    {
      key: "7",
      icon: <ReadOutlined />,
      label: "About",
      onClick: () => {
        router.push("/about");
        setSelected("7");
      },
    },
  ]);

  const pathname=usePathname();

  useEffect(()=>{
    if (localStorage.getItem("token")) {
      setItems(logItems);
    }
    switch (pathname) {
      case "/register":
        setSelected("3");
        break;
      case "/login":
        setSelected("2");
        break;
      case "/":
        setSelected("1");
        break;
      case "/application":
        setSelected("4");
        break;
      case "/user":
        setSelected("5");
        break;
      case "/profile":
        setSelected("6");
        break;
      case "/about":
        setSelected("8");
        break;
      default:
        setSelected("4");
        break;
    }

  },[selected,pathname,router]);

  return (
    <html>
      <head>
        <title>Applications Histories</title>
      </head>
      <body className="h-screen">
        <Layout
          className="min-h-screen static bg-white"
        >
          <Sider trigger={null} collapsible collapsed={collapsed}>
            <div className="demo-logo-vertical" />
            <Menu
              theme="light"
              mode="inline"
              selectedKeys={[selected]}
              style={{
                height:"100%"
              }}
              items={items}
            />
          </Sider>
          <Layout className="min-h-screen w-full">
            <Header style={{ padding: 0, background: colorBgContainer }}>
              <Button
                type="text"
                icon={collapsed ? <MenuUnfoldOutlined /> : <MenuFoldOutlined />}
                onClick={() => setCollapsed(!collapsed)}
                style={{
                  fontSize: "16px",
                  width: 64,
                  height: 64,
                }}
              />
            </Header>
            <Content
              className="flex-1"
              style={{
                margin: "24px 16px",
                padding: 24,
                backgroundColor:"white"
              }}
            >
              {children}
            </Content>
          </Layout>
        </Layout>
      </body>
    </html>
  );
};

export default AppLayout;
